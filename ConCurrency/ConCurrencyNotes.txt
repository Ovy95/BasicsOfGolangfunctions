GoRoutines 

GoRoutines is a lightweight, independently executing function (managed by the Go runtime) that can run concurrently with other activities/ functions.
- When the program starts, the main routine gets created by default
- The main routine is the place that we can create child routines 
- Routines (Including main) are independent
- GoRoutines cannot stop one another, but can communicate and send requests (including stop requests) to one another.
- a go routine has its own stack which grows and shrinks 
- Goroutines are lightweight and many of them can be easily created and run at the same time 

- Use the 'go' statements to create new Goroutines

type WaitGroup

- A WaitGroup waits for a collection of GoRoutines to finish.
- The main Goroutines calls Add to set the number of Goroutines to wait for.
- then each of the Goroutines runs and calls Done when finished
at the same time, Wait can be used to block until all Goroutines have finished.
A WaitGroup must not be copied after first ues 

- func (wg *WaitGroup)Add(delta int)
Add adds delta which may be negative, to the WaitGroup counter. If the counter becomes zero, all Goroutines blocked on wait are released. If the counter goes negative, Add panics.
- func(wg *WaitGroup) Done()
done decrements the WaitGroup counter by one.
func (wg *WaitGroup) Wait()
wait blocks until the WaitGroup counter is zero.

Concurrency & Parallelism 

Concurrency is like 'inhaling' and 'talking' . You can't do both at the same time. You take turns, but it's that fast it's not noticeable.

Parallelism is like 'breathing' 'Sleeping' and 'dreaming' All can be done at the same time with no short interruptions 

A blocking call : any statement (normally call to another routine ) that its execution takes long, and the rest of the code waits for it to complete is called a blocking call 
for instance a call to a busy server that the serve response may be immediate or may take several minutes 

with one CPU, the scheduler simulates Concurrency by executing a slives of a go routine one at a time. If one thread/Goroutine is blocked, another one is executed
With muiltiple CPUs multiple Goroutines are executed at the same time at differeent CPUS 

Race condition 

Happens when more than once process try to access the same resource 

go run -race main.go 
This command can be run to find possible race conditions, 
It prints the results, and gives some infomauton about the race.

Mutex  (mutual exclusion)

- Mutex is a property of Concurrency control, 
which is insituted for the purpose of preventing race conditions. 
It is the requirement that one thread of execution never enters its critical section at the same time that another concurrent thread of execution enters its own critcal section 

