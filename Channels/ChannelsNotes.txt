Channels Theory 

Channels must be of the same type an example sending a string to string or int to int 

Two Operations of a channel send and receive (Communications)

c <-x   // Send - Sends a value x to the channel c 
x = <-c // receive - reads from the channels c and saves in variable x 
<-c     // receive - result is discarded

channel support a third operation close()
close sets a flag indicating that no more values will be sent on this channel;
To close a channel: close(ch)

On a closed channel:
Further 'Send' Operations will panic 
Further 'receive' operation receive the already sent values, until no more value are left
after that completion point, any receive operations immediately concludes and yields the zero value of the channel's element type

Unbuffered (synchronous) Channels

by default, Communication is unbuffered (synchronous);

It means that a 'send' does not complete until a 'receiver' accepts the value;

This is blocking behaviour of Unbuffered channels tells us that there is no spaces in the channel for data 
( because for any 'send' there must be a 'receive' and vice versa);

in short , channel operations (i.e send/receive) block until the other side is ready;

Communcation can be seen as a form of synchronous when goroutines share data through a 
channel that synchronizes to Communicate with those goroutines. Clearly unbuffered channels
are the perfect candidate for synchronizing Communcation of multiple goroutines 

Semaphore

A semaphore is a variable (or abstract data type) used to control access to a common resource shared by multiple
processes in concurrent system such as mutitasking operating system

Semaphores are a usefull tool in prevention of race conditoons however their use is by no means a guarantee
that a program is free from these problems 

Semaphores which allow an arbitrary resource count are called counting semaphores, while semaphores which are restricted to the values 0 and 1
(or locked/unlocked, unavailable/available) are called binary semaphores and are used to implement locks


Channel Direction 

3 different types of channels 

Bidrectional channel 
Used for send and receive, which was used for exercise 7 sending the text to the channel then returning the channel with the text being effected by the function
(Upper/Lowercase)

func bi(c chan int) {
  c <- 10           // ok
  fmt.Println(<-c)  // ok
}


Send only channel 
Only sends information

func snd(out chan <- int){
  out <- 10          // ok 
  fmt.Println(<-out) // error - receive from send-only type
}

Receive only channel
Only accepts information
* Receive-only channels cannot be closed, because closing a channel is a way for the sender to say that no more values will be sent
to the channel, that doesn't make sense for receive- only channels.

func rcv(in <- chan int){
  in <- 10           // error - send to receive-only type
  fmt.Println(<-out) // ok
}

__________________________

Multiplexing :
In telecommuncations and computer networks, Multiplexing is a method by which multiple analog or
digital signals are combined into one signal
over a shared medium. The aim is to share a scarce resource. For example , in telecommuncations,
several telephone calls may be carried using one wire

To extend this concept to a typical client-server application, many clients may send requests to a server (that is the shared scarce resource),
The server then processes the received requests and sends responeses back to the clients 

To multiplex operations we need a select statement:

select {
  case <- ch1:
    //
  case x <- ch2
    // use x 
  case ch3 <- y
    //
  default
}

The select statement is used to choose from multiple send/receive channel operations

The select statement bloicks until one of the send/receive operations is ready 
If multiple operations are ready, one of them will randomly be picked 
__________________________
Buffered Channels (asynchronous / non-blocking):

The capacity argument of make is bigger than zero c := make(chan int, 3)
c:= make(chan channelType, channelCapacity)

a Send operation: adds an elelment to the end of the queue:
a Receive Operation :removes an element from the front 

'Sends' to a Buffered channel are blocked only when the buffer is full 
if the channel is 'full'->
'send' operation blocks until a 'receive' operation makes a space available.

'Receive' from a buffered channel are blocked only when the buffer is empty.
if the channel is 'empty' ->
'receive' operation blocks until a 'send' operation send a value